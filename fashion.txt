

    from tensorflow.keras.datasets import fashion_mnist
    import numpy as np

    (train_x, train_y), (test_x, test_y) = fashion_mnist.load_data()

    Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-labels-idx1-ubyte.gz
    29515/29515 ━━━━━━━━━━━━━━━━━━━━ 0s 1us/step
    Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/train-images-idx3-ubyte.gz
    26421880/26421880 ━━━━━━━━━━━━━━━━━━━━ 5s 0us/step
    Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-labels-idx1-ubyte.gz
    5148/5148 ━━━━━━━━━━━━━━━━━━━━ 0s 1us/step
    Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/t10k-images-idx3-ubyte.gz
    4422102/4422102 ━━━━━━━━━━━━━━━━━━━━ 1s 0us/step

    from tensorflow.keras.models import Sequential
    from tensorflow.keras.layers import Dense, Flatten, MaxPooling2D, Conv2D

    model = Sequential()

    model.add(Conv2D(filters=64,kernel_size=(3,3),activation='relu',input_shape=(28, 28, 1)))

    # Adding maxpooling layer to get max value within a matrix
    model.add(MaxPooling2D(pool_size=(2,2)))

    model.add(Flatten())
    model.add(Dense(128, activation = "relu"))
    model.add(Dense(10, activation = "softmax"))

    /opt/anaconda3/lib/python3.11/site-packages/keras/src/layers/convolutional/base_conv.py:99: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.
      super().__init__(

    model.summary()

    Model: "sequential"

    ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓
    ┃ Layer (type)                    ┃ Output Shape           ┃       Param # ┃
    ┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩
    │ conv2d (Conv2D)                 │ (None, 26, 26, 64)     │           640 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ max_pooling2d (MaxPooling2D)    │ (None, 13, 13, 64)     │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ flatten (Flatten)               │ (None, 10816)          │             0 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ dense (Dense)                   │ (None, 128)            │     1,384,576 │
    ├─────────────────────────────────┼────────────────────────┼───────────────┤
    │ dense_1 (Dense)                 │ (None, 10)             │         1,290 │
    └─────────────────────────────────┴────────────────────────┴───────────────┘

     Total params: 1,386,506 (5.29 MB)

     Trainable params: 1,386,506 (5.29 MB)

     Non-trainable params: 0 (0.00 B)

    model.compile(optimizer = 'adam', loss = 'sparse_categorical_crossentropy', metrics = ['accuracy'])

    model.fit(train_x.astype(np.float32), train_y.astype(np.float32), epochs = 5, validation_split = 0.2)

    Epoch 1/5
    1500/1500 ━━━━━━━━━━━━━━━━━━━━ 15s 10ms/step - accuracy: 0.7903 - loss: 5.1516 - val_accuracy: 0.8782 - val_loss: 0.3526
    Epoch 2/5
    1500/1500 ━━━━━━━━━━━━━━━━━━━━ 15s 10ms/step - accuracy: 0.8972 - loss: 0.2902 - val_accuracy: 0.8907 - val_loss: 0.3112
    Epoch 3/5
     943/1500 ━━━━━━━━━━━━━━━━━━━━ 5s 9ms/step - accuracy: 0.9145 - loss: 0.2372

    loss, acc = model.evaluate(test_x, test_y)

    313/313 [==============================] - 1s 2ms/step - loss: 0.5724 - accuracy: 0.8171

    labels = ['t_shirt', 'trouser', 'pullover', 'dress', 'coat', 'sandal', 'shirt', 'sneaker',   'bag', 'ankle_boots']

    predictions = model.predict(test_x[:1])

    1/1 [==============================] - 0s 73ms/step

    import numpy as np

    label = labels[np.argmax(predictions)]

    import matplotlib.pyplot as plt
    print(label)
    plt.imshow(test_x[:1][0])
    plt.show

    ankle_boots

    <function matplotlib.pyplot.show(close=None, block=None)>

[]
